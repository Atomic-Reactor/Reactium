const tree = require('directory-tree');
const path = require('path');
const fs   = require('fs');

const flattenRegistry =
    (registry = {children: []}, manifest = []) => registry.children
        .reduce((manifest, item) => {
            if ( 'children' in item ) {
                return flattenRegistry(item, manifest);
            }
            if ( 'path' in item ) {
                manifest.push(item);
            }
            return manifest;
        }, manifest);

const jsSources = sourcePath => flattenRegistry(tree(sourcePath, {
    extensions: /\.js$/,
    exclude: /.ds_store/i
}));

const find = (searches = [], sourcePath) => {
    const mappings = searches.reduce((mappings, {name, type}) => {
        mappings[name] = {
            type,
            imports: [],
        };
        return mappings;
    }, {});

    return jsSources(sourcePath)
        .map(file => file.path)
        .reduce((mappings, file) => {
            searches.forEach(({name, pattern}) => {
                if ( pattern.test(file) ) {
                    mappings[name].imports.push(file.replace(/src\/app\//, '').replace(/.js$/, ''));
                }
            })

            return mappings;
        }, mappings);
}

module.exports = function() {
    const manifest = find([
        {
            name: 'allActions',
            type: 'actions',
            pattern: /actions.js$/,
        },
        {
            name: 'allActionTypes',
            type: 'actionTypes',
            pattern: /actionTypes.js$/,
        },
        {
            name: 'allReducers',
            type: 'reducers',
            pattern: /reducers.js$/,
        },
        {
            name: 'allInitialStates',
            type: 'state',
            pattern: /state.js$/,
        },
        {
            name: 'allRoutes',
            type: 'route',
            pattern: /route.js$/,
        },
        {
            name: 'allServices',
            type: 'services',
            pattern: /services.js$/,
        },
    ], './src/app');


const fileContents = `
/** generated by createManifest.js **/
module.exports = {
    get: () => {
        return {\n${Object.keys(manifest).map(key => {
            const { imports, type } = manifest[key];
            return (
                `          ${key}: {\n` +
                imports.map(file => {
                    const found = file.match(new RegExp(`\/(.+?)\/${type}$`))
                    let [ ,domain ] = found;
                    return `            ${domain}: require('${file}').default,\n`;
                }).join('') +
                '          },\n'
            );
        })
        .join('')}
        }
    },
    list: () => {
        return ${JSON.stringify(manifest, null, 2)};
    }
}
`;

    fs.writeFileSync(path.resolve('./src/', 'manifest.js'), fileContents);
}
