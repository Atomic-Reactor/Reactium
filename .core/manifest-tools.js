const tree = require('directory-tree');
const path = require('path');
const fs = require('fs');
const _ = require('underscore');
const reactiumConfig = require('./reactium-config');
const manifestConfig = require('./manifest.config')(reactiumConfig.manifest);
const manifestFilePath = path.resolve('./src', 'manifest.js');
const op = require('object-path');
const zoneGenerator = require('./.cli/commands/reactium/zones/generator');
const prettier = require('prettier');

const flattenRegistry = (registry = { children: [] }, manifest = []) =>
    registry.children.reduce((manifest, item) => {
        if ('children' in item) {
            return flattenRegistry(item, manifest);
        }
        if ('path' in item) {
            manifest.push(item);
        }
        return manifest;
    }, manifest);

const jsSources = sourcePath =>
    flattenRegistry(
        tree(sourcePath, {
            extensions: /\.jsx?$/,
            exclude: [/.ds_store/i, /.core\/.cli\//i, /.cli\//i],
        })
    );

const find = (searches = [], sourceMappings) => {
    let mappings = searches.reduce((mappings, { name, type }) => {
        mappings[name] = {
            type,
            imports: [],
        };
        return mappings;
    }, {});

    sourceMappings.forEach(sourceMapping => {
        mappings = jsSources(sourceMapping.from)
            .map(file => file.path)
            .reduce((mappings, file) => {
                searches.forEach(({ name, pattern }) => {
                    if (pattern.test(file)) {
                        mappings[name].imports.push(
                            file
                                .replace(/\\/g, '/')
                                .replace(sourceMapping.from, sourceMapping.to)
                                .replace(/.jsx?$/, '')
                        );
                    }
                });

                return mappings;
            }, mappings);
    });

    return mappings;
};

const getZones = async () =>
    await zoneGenerator({
        params: {
            node: true,
            activity: false,
            save: false,
        },
        props: {
            cwd: path.resolve('.'),
        },
    });

module.exports = async function() {
    const manifest = find(
        manifestConfig.patterns,
        manifestConfig.sourceMappings
    );

    let manifestFileExists = false;
    try {
        manifestFileExists = fs.existsSync(manifestFilePath);
    } catch (err) {
        // swallow
    }

    const manifestDiffers = (current, next) => {
        let differs = false;
        let currentTypes = Object.keys(current);
        let nextTypes = Object.keys(next);

        // check for new core types
        if (currentTypes.length !== nextTypes.length) {
            return true;
        }

        _.union(currentTypes, nextTypes).forEach(type => {
            differs =
                differs ||
                _.difference(
                    current[type].imports.sort(),
                    next[type].imports.sort()
                ).length > 0;

            differs =
                differs ||
                _.difference(
                    next[type].imports.sort(),
                    current[type].imports.sort()
                ).length > 0;
        });

        return differs;
    };

    let shouldWriteManifest = true;
    if (manifestFileExists) {
        const existingManifest = require(manifestFilePath);
        const existingContexts = Object.keys(
            op.get(existingManifest, 'listContexts', _ => ({}))()
        );
        shouldWriteManifest = manifestDiffers(
            existingManifest.list(),
            manifest
        );

        shouldWriteManifest =
            shouldWriteManifest ||
            existingContexts.length !==
                Object.keys(manifestConfig.contexts).length;
    }

    // Write Manifest only if it does not exist or has changed
    if (shouldWriteManifest) {
        const zones = await getZones();

        console.log("[00:00:00] Writing new 'src/manifest.js'...");
        let fileContents = prettier.format(
            `
                /** generated by createManifest.js **/

                module.exports = {
                    zones: () => {
                        return ${zones}
                    },
                    get: () => {
                        return {\n${Object.keys(manifest)
                            .map(key => {
                                const { imports, type } = manifest[key];
                                const domainRegExp = new RegExp(
                                    `\/([A-Za-z_0-9]+?)\/${type}$`
                                );
                                return (
                                    `${key}: {\n` +
                                    imports
                                        .map(file => file.replace(/\\/g, '/'))
                                        .filter(file =>
                                            file.match(domainRegExp)
                                        )
                                        .map(file => {
                                            let [, domain] = file.match(
                                                domainRegExp
                                            );
                                            return `${domain}: require('${file}').default,\n`;
                                        })
                                        .join('') +
                                    '},\n'
                                );
                            })
                            .join('')}
                        }
                    },
                    contexts: {\n${Object.entries(manifestConfig.contexts)
                        .map(([context, pattern]) => {
                            const { modulePath, filePattern } = pattern;
                            return `'${context}': typeof window !== 'undefined' && require.context('${modulePath}', true, /${filePattern}/),\n`;
                        })
                        .join('')}
                    },
                    listContexts: () => {
                        return ${JSON.stringify(
                            manifestConfig.contexts,
                            null,
                            2
                        )};
                    },
                    list: () => {
                        return ${JSON.stringify(manifest, null, 2)};
                    },
                }
            `,
            { parser: 'babylon' }
        );
        fs.writeFileSync(manifestFilePath, fileContents);
    }
};
